from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from config.const import CBData
import config.config as cfg
from data.models import User, Mode


def with_close_btn():
    """
    –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    return InlineKeyboardMarkup([[InlineKeyboardButton(text="¬ª –°–∫—Ä—ã—Ç—å ¬´", callback_data="close")]])


def easy_inline_markup(buttons=None):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    1 –∫–Ω–æ–ø–∫–∞
    [[(text, callback)]]

    2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ä–æ–∫–µ
    [[(text, callback), (text, callback)]]

    2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    [
        [("–î–∞", "callback_yes"), ("–ù–µ—Ç", "callback_no")],
        [("1", "callback_1"), ("2", "callback_2")],
    ]

    –ö–Ω–æ–ø–∫–∞ —Å url
    ("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏", "http://—Å—Å—ã–ª–∫–∞", "url")
    """

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
    if not buttons:
        return with_close_btn()

    bot_buttons = []
    for row in buttons:
        bot_row = []
        for button in row:
            if 'url' in button:
                bot_row.append(InlineKeyboardButton(text=button[0], url=button[1]))
            else:
                bot_row.append(InlineKeyboardButton(text=button[0], callback_data=button[1]))
        bot_buttons.append(bot_row)

    return InlineKeyboardMarkup(bot_buttons)


def minute_packs():
    """
    –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –º–∏–Ω—É—Ç
    """
    pack_1 =    100
    pack_2 =    500
    pack_3 =  1_000
    pack_4 =  5_000
    pack_5 = 10_000

    def generate_button(pack):
        """
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä inline –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
        """
        return [(f"{pack} –º–∏–Ω—É—Ç - {pack * cfg.PRICE_PER_MINUTE_IN_RUB} ‚ÇΩ", f"{CBData.buy_minute_pack}_{pack}")]

    return easy_inline_markup([
        generate_button(pack_1),
        generate_button(pack_2),
        generate_button(pack_3),
        generate_button(pack_4),
        generate_button(pack_5)
    ])


def pay_test_button(minutes):
    return easy_inline_markup([[(f"{minutes} –º–∏–Ω—É—Ç - {minutes * cfg.PRICE_PER_MINUTE_IN_RUB} ‚ÇΩ",
                                 f"{CBData.buy_minute_pack}_{minutes}")]])


def robokassa_pay_button(payment_link, invoice_sum):
    """
    –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å Robokassa
    """
    return easy_inline_markup([[(f"–û–ø–ª–∞—Ç–∏—Ç—å {invoice_sum} ‚ÇΩ", f"{payment_link}", "url")]])


def modes_markup(db_user: User):
    """
    –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
    """
    def generate_button(db_mode: Mode):
        if db_user.mode_id == db_mode.mode_id:
            btn_name = f"üü¢ {db_mode.name}"
            cb_data = "none"
        else:
            btn_name = db_mode.name
            cb_data = f"{CBData.change_mode}_{db_mode.mode_id}"
        return [(btn_name, cb_data)]

    modes = db_user.get_all_modes()
    buttons = []
    for mode in modes:
        buttons.append(generate_button(mode))

    return easy_inline_markup(buttons)


def google_sheets(url):
    """
    –°—Å—ã–ª–∫–∞ –Ω–∞ –ì—É–≥–ª —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    """
    return easy_inline_markup([[("üìä –°–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ", url, "url")]])
